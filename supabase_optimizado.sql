-- Script SQL optimizado para WhatsApp Bible GPT
-- Este script configura todas las tablas, funciones y políticas necesarias

-- Habilitar la extensión uuid-ossp si no está habilitada
create extension if not exists "uuid-ossp";

-- SECCIÓN 1: TABLAS PRINCIPALES

-- Crear tabla de usuarios si no existe
create table if not exists users (
    id uuid default uuid_generate_v4() primary key,
    phone_number text unique not null,
    subscription_status text check (subscription_status in ('free', 'paid')) default 'free',
    subscription_end_date timestamptz,
    messages_count integer default 0,
    created_at timestamptz default now(),
    updated_at timestamptz default now()
);

-- Crear tabla de mensajes si no existe
create table if not exists messages (
    id bigint generated by default as identity primary key,
    user_id uuid references users(id),
    question text not null,
    response text,
    is_paid boolean default false,
    tokens_used integer,
    created_at timestamptz default now()
);

-- SECCIÓN 2: ÍNDICES

-- Índices para mejorar el rendimiento
create index if not exists idx_users_phone_number on users(phone_number);
create index if not exists idx_messages_user_id on messages(user_id);
create index if not exists idx_messages_created_at on messages(created_at);

-- SECCIÓN 3: TRIGGERS Y FUNCIONES PARA ACTUALIZACIÓN DE TIMESTAMPS

-- Función para actualizar el timestamp updated_at
create or replace function update_updated_at_column()
returns trigger as $$
begin
    new.updated_at = now();
    return new;
end;
$$ language plpgsql;

-- Trigger para actualizar updated_at en la tabla users
drop trigger if exists update_users_updated_at on users;
create trigger update_users_updated_at
    before update on users
    for each row
    execute function update_updated_at_column();

-- SECCIÓN 4: FUNCIONES PARA GESTIÓN DE MENSAJES

-- Función para incrementar el contador de mensajes (usado por trigger)
create or replace function increment_messages_count()
returns trigger as $$
begin
    update users
    set messages_count = messages_count + 1
    where id = new.user_id;
    return new;
end;
$$ language plpgsql;

-- Trigger para incrementar el contador de mensajes automáticamente
drop trigger if exists increment_user_messages_count on messages;
create trigger increment_user_messages_count
    after insert on messages
    for each row
    execute function increment_messages_count();

-- SECCIÓN 5: FUNCIONES RPC (Remote Procedure Call)

-- Función RPC para incrementar el contador de mensajes de un usuario
create or replace function increment_user_messages_count(user_phone text)
returns void as $$
begin
    update users
    set messages_count = messages_count + 1
    where phone_number = user_phone;
end;
$$ language plpgsql security definer;

-- Función RPC para verificar el límite de mensajes gratuitos
drop function if exists check_free_messages_limit(text);
create or replace function check_free_messages_limit(user_phone text)
returns table (
    can_send boolean,
    message_count integer,
    is_free boolean,
    is_at_limit boolean
) as $$
declare
    user_record users%rowtype;
begin
    -- Obtener información del usuario
    select * into user_record
    from users
    where phone_number = user_phone;

    -- Si el usuario no existe
    if not found then
        return query select 
            true as can_send,
            0 as message_count,
            true as is_free,
            false as is_at_limit;
        return;
    end if;

    -- Si el usuario tiene suscripción activa
    if user_record.subscription_status = 'paid' and user_record.subscription_end_date > now() then
        return query select 
            true as can_send,
            user_record.messages_count,
            false as is_free,
            false as is_at_limit;
        return;
    end if;

    -- Si el usuario ha excedido el límite de mensajes gratuitos (15)
    if user_record.messages_count >= 15 then
        return query select 
            false as can_send,
            user_record.messages_count,
            true as is_free,
            false as is_at_limit;
        return;
    end if;

    -- Si el usuario está en su último mensaje gratuito
    if user_record.messages_count = 14 then
        return query select 
            true as can_send,
            user_record.messages_count,
            true as is_free,
            true as is_at_limit;
        return;
    end if;

    -- Usuario puede enviar mensaje gratuito
    return query select 
        true as can_send,
        user_record.messages_count,
        true as is_free,
        false as is_at_limit;
end;
$$ language plpgsql security definer;

-- Función RPC para crear un usuario
create or replace function create_user(phone text)
returns users as $$
declare
    new_user users;
begin
    insert into users (phone_number, subscription_status, messages_count)
    values (phone, 'free', 0)
    returning * into new_user;
    
    return new_user;
end;
$$ language plpgsql security definer;

-- SECCIÓN 6: FUNCIONES AUXILIARES PARA CREACIÓN DE TABLAS DESDE EL CÓDIGO

-- Función para crear la tabla users (para uso desde el código)
create or replace function create_users_table()
returns void as $$
begin
    create table if not exists users (
        id uuid default uuid_generate_v4() primary key,
        phone_number text unique not null,
        subscription_status text check (subscription_status in ('free', 'paid')) default 'free',
        subscription_end_date timestamptz,
        messages_count integer default 0,
        created_at timestamptz default now(),
        updated_at timestamptz default now()
    );
end;
$$ language plpgsql security definer;

-- Función para crear la tabla messages (para uso desde el código)
create or replace function create_messages_table()
returns void as $$
begin
    create table if not exists messages (
        id bigint generated by default as identity primary key,
        user_id uuid references users(id),
        question text not null,
        response text,
        is_paid boolean default false,
        tokens_used integer,
        created_at timestamptz default now()
    );
end;
$$ language plpgsql security definer;

-- SECCIÓN 7: POLÍTICAS DE SEGURIDAD (RLS)

-- Habilitar RLS
alter table users enable row level security;
alter table messages enable row level security;

-- Políticas para la tabla users
drop policy if exists "Permitir lectura de usuarios para la aplicación" on users;
create policy "Permitir lectura de usuarios para la aplicación"
on users for select
to anon
using (true);

drop policy if exists "Permitir inserción de usuarios para la aplicación" on users;
create policy "Permitir inserción de usuarios para la aplicación"
on users for insert
to anon
with check (true);

drop policy if exists "Permitir actualización de usuarios para la aplicación" on users;
create policy "Permitir actualización de usuarios para la aplicación"
on users for update
to anon
using (true);

-- Políticas para la tabla messages
drop policy if exists "Permitir lectura de mensajes para la aplicación" on messages;
create policy "Permitir lectura de mensajes para la aplicación"
on messages for select
to anon
using (true);

drop policy if exists "Permitir inserción de mensajes para la aplicación" on messages;
create policy "Permitir inserción de mensajes para la aplicación"
on messages for insert
to anon
with check (true);

drop policy if exists "Permitir actualización de mensajes para la aplicación" on messages;
create policy "Permitir actualización de mensajes para la aplicación"
on messages for update
to anon
using (true);
